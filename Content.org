#+HUGO_BASE_DIR: ./
#+options: author:nil
#+MACRO: marginnote @@html:{{<marginnote>}}$1{{</marginnote>}}@@
#+MACRO: sidenote @@html:{{<sidenote>}}$1{{</sidenote>}}@@

# These are used in the Talks section
#+MACRO: speakerdeck @@html:{{<marginnote>}}[Slides on Speaker Deck]($1){{</marginnote>}}@@
#+MACRO: skillsmatter @@html:{{<marginnote>}}[Video at Skills Matter]($1) (free login required){{</marginnote>}}@@
#+MACRO: youtube @@html:{{<marginnote>}}[Video on YouTube]($1){{</marginnote>}}@@

* Posts

** First                                                              :meta:
:PROPERTIES:
:EXPORT_FILE_NAME: first
:EXPORT_DATE: 2023-10-12
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :meta true :math false
:END:
#+begin_description
just some text to show on the home page
#+end_description

This is the first post, Just to get something up on this site.

** An Easy Answer is not Always Best                            :simplicity:
:PROPERTIES:
:EXPORT_FILE_NAME: an-easy-answer-is-not-always-best
:EXPORT_DATE: 2010-01-08
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :meta true :math false
:END:
#+begin_description
Sometimes it's better to answer the actual, unspoken question
#+end_description

On{{{marginnote(This was originally published on my old site at [abizern.org](https://abizern.org))}}} New Year's eve, Dámasa asked me to calculate some fraction of a fraction and
provide the answer as a fraction in eighths. The post had just arrived so I
flipped over an envelope and started working it out.

"Why do you need the answer in eighths?" I asked, while making calculations.

"Because I'm trying to convert a recipe and my scales only go down to eighths of an ounce."

"Why don't you just use grams?"

"…"

This reminded me of an [[https://asp-blogs.azurewebsites.net/alex_papadimoulis/408925][article]] by Alex Papadimoulis where he used the analogy of being asked whether it was better to use a bottle or a shoe to pound a nail. Although there are situations where either could be used, the real answer is, of course, to use a hammer. Sometimes we are asked questions to which we can provide an answer; but perhaps we should first stop and ask the reason for the question before answering it.

*** Lazy Questions
Let's take [[https://stackoverflow.com][StackOverflow]] as an example{{{marginnote(I'm not knocking it\, I learned to program on this site. Not by asking questions\, but through the research I did to answer questions.)}}}
The programmer's question and answer site that is also a game. 'Good' behaviour, such as asking good questions, providing helpful answers, are rewarded by upvotes, 'bad' behaviour; lazy questions, incorrect answers, are discouraged by downvotes. It is becoming increasingly common to find a Stack Overflow link as the top hit when searching the web for answers to programming questions. But, if you follow a mailing list for your chosen speciality it isn't hard to see the same question in both places and different approaches to answering them.

The site's [[https://meta.stackexchange.com/questions/19665/the-help-vampire-problem/19673#19673][recommended approach]] to the [[https://slash7.com/2006/12/22/vampires/][help vampires]] is a pragmatic one. Essentially, you can either be aloof and use the tools of the site to discourage the behaviour; or you could just answer the question and get some points. On a mailing list like, say, CocoaDev, a weak question will get sharp answers (if any); but on Stack Overflow, somebody might just answer the question because they get something out of it.

This might be useful to somebody. I'm sure there are times where we all just need a quick answer to question without deeper knowledge. Get help with the 'how' to get something done, and pick up on the 'why' later.  But read enough questions in public forums and you'll soon recognise those who just want to know the 'how', and no amount of saying they need to learn the basics is going to help. Maybe back up and ask why they are asking so you can better answer their question.

*** Relational vs Instrumental Understanding
 Richard Skemp{{{sidenote(Skemp\, Richard R. [Relational Understanding and Instrumental Understanding](https://www.jstor.org/stable/41182357). Mathematics Teaching in the Middle School\, vol. 12\, no. 2\, 2006\, pp. 88–95)}}}
 wrote on the difference between relational{{{sidenote(**Relational** understanding is knowing what to do and why.)}}}
 and instrumental{{{sidenote(**Instrumental** understanding is rote learning)}}}
 understanding. A particular example is how the invert and multiply method of fractional division is widely taught without actually developing an understanding of the operation itself. When I was 14 my elder brother taught me [[https://en.wikipedia.org/wiki/Derivative][differentiation]]. Not by saying "subtract one from the exponent and multiply", but rather by drawing a curve and working through calculating a tangent using deltas and differences tending to zero and how it led to the simpler method. I've long forgotten the hard way, but after that I was very good at calculus.

Perhaps this is something to think about next time somebody asks how to write an application without using Interface Builder in Xcode.


* About
:PROPERTIES:
:EXPORT_FILE_NAME: About
:EXPORT_HUGO_SECTION: /
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :math false 
:END:

I am a freelance iOS and macOS developer in London. Currently *available* for new contracts.

I write modern, maintainable code in Swift{{{marginnote(Of course\, I can hurt myself in other languages\, but this is what I use professionally)}}} using SwiftUI, UIKit, AppKit and a whole lotta love.

I've given talks across the UK and internationally{{{sidenote(Excuse the humblebrag)}}} and you can see a list of some of them [[/talks][here]]

I organise the monthly [[https://nscodernightlondon.com][NSCoder Night London]] meetup where iOS and macOS developers meet to chat and share knowledge and experience. This went into hiatus during the Pandemic, but we managed to keep it going by having remote meetings.

You can see my older posts at my previous site [[https://abizern.org][abizern.org]], but I'm going to keep this one just for development related topics.

** Contact
Feel{{{marginnote(Looks odd\, but this way I know the contact is coming from this site)}}} free to contact me at [[mailto://tails-rollout0s@icloud.com][tails-rollout0s@icloud.com]].

I can be found on various places online with the username of =abizern=. I'm not on Facebook, though.

** GPG Key
Key ID: =7E2C07666BEEED1C=

Key Signature: =CF1C 8FE5 A508 0E70 4BCB  97DE 7E2C 0766 6BEE ED1C=

Key: Available on a keyserver near you, or you can [[/res/GPGKey.asc][download it]].

** Colophon

This is a static site generated using [[https://gohugo.io][Hugo]] and the [[https://hugo-tufte.netlify.app][hugo-tufte]] theme. There are no analytics being collected.

Comments are not enabled on this site. If you'd like to follow up on anything just send me an email

* Talks
:PROPERTIES:
:EXPORT_FILE_NAME: Talks
:EXPORT_HUGO_SECTION: /
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :math false
:END:

Some of the presentations I have made at conferences and developer meet-ups over the years.

** Pull Requests are a Language
/iOSCon, London, 22nd March 2018/

Move beyond "LGTM". Pull Requests{{{speakerdeck(https://speakerdeck.com/abizern/pull-requests-are-a-language)}}}{{{skillsmatter(https://skillsmatter.com/skillscasts/11710-lightning-talk-pull-requests-are-language#video)}}} can be a way for teams to communicate more than just changes in a codebase.

** The Road to Damascus, or FRP and Me
/NSSpain, Logroño, 14th September 2017/

A talk{{{speakerdeck(https://speakerdeck.com/abizern/the-road-to-damascus-or-frp-and-me)}}}{{{marginnote([Video on NSSpain's Vimeo](https://vimeo.com/235050604))}}} given at NSSpain about my experiences of looking into using Functional Reactive Programming with RxSwift.

** Be Your Own Backend Developer
/Code Mobile, Chester, 18th April 2017/

An overview{{{speakerdeck(https://speakerdeck.com/abizern/be-your-own-backend-developer)}}} of Server Side Swift. This was recorded, but unfortunately the video isn't available.

** Safer Programming with Types
/Swift London, London, 25th October, 2016/

A short{{{speakerdeck(https://speakerdeck.com/abizern/safer-programming-with-types)}}}{{{youtube(https://www.youtube.com/watch?v=uR6ox-9VPAA&t=1s)}}} talk about type safety presented at the Swift London meetup.

** Core Data: It's not Dead Yet
/FrenchKit, Paris, 23rd September 2016/

I spoke{{{speakerdeck(https://speakerdeck.com/abizern/core-data-its-not-dead-yet)}}}{{{youtube(https://youtu.be/iOdg7WOEWWE)}}} at the first FrenchKit (now known as Swift Connection) conference about how Core Data is still relevant in the age of Swift.

** Being Imperfect in a Perfect World
/NSBarcelona, Barcelona, 21st September 2016/

I spoke{{{speakerdeck(https://speakerdeck.com/abizern/being-imperfect-in-a-perfect-world)}}} at the NSBarcelona meetup about the choices we make about the patterns we use in development.

** AltConf Post-WWDC Panel
/AltConf, San Franciso, June 2016/

I was a panel member for the AltConf post-WWDC discussion. This was recorded, but the video is no longer available.

** Swift London Pre-WWDC Panel
/Swift London, London, June 2016/

I{{{youtube(https://www.youtube.com/watch?v=PK1PPNTmGuw)}}} was a panel member for a pre-WWDC discussion. I was a late addition to this, which is my excuse for looking so scruffy.

** Dependency Management with Carthage
/CocoaHeads Stockholm, Stockholm, May 2016/

An updated{{{speakerdeck(https://speakerdeck.com/abizern/dependency-management-with-carthage)}}}{{{marginnote([Video on Vimeo](https://vimeo.com/album/3943556/video/165920026))}}} and expanded version of my previous talk about using Carthage for dependency management.

** Carthage
/NSLondon, London, 30th July, 2015/

A talk{{{speakerdeck(https://speakerdeck.com/abizern/carthage)}}} at NSLondon about using Carthage for dependency management.

** What Haskell Teaches me about Writing Swift
/AltConf, San Francisco, June 2015/

I had the{{{speakerdeck(https://speakerdeck.com/abizern/what-haskell-teaches-me-about-writing-swift)}}} opportunity to present a longer version of the lightning talk I gave at Swift Summit. These are my personal thoughts about writing Swift after knowing some Haskell.

This was recorded, but the video is no longer available.

** What Haskell Taught me about Swift
/Swift Summit, London, 21st March 2015/

A short talk{{{speakerdeck(https://speakerdeck.com/abizern/what-haskell-taught-me-about-writing-swift)}}} about how knowing Haskell helped me to better understand and learn Swift.

** Fizz Buzz in Swift
/NSLondon, London, 14th August 2014/

A talk{{{speakerdeck(https://speakerdeck.com/abizern/fizzbuzz-in-swift-a-talk-with-3-codas)}}} I gave about different approaches to solving the Fizz Buzz problem in in Swift, along with some thoughts about the new language.

This was my first mention in iOSDevWeekly.{{{sidenote([Issue 167](https://iosdevweekly.com/issues/167))}}}


** Adding 3rd Party Code to your Project
/iOSCon 2014, London, 15th May 2014/

I spoke at the first edition of iOSCon{{{speakerdeck(https://speakerdeck.com/abizern/adding-3rd-party-code-to-xcode-projects)}}}{{{skillsmatter(https://skillsmatter.com/skillscasts/5058-third-party-code)}}} covering the usage of Git and CocoaPods for adding dependencies to an Xcode project

** Distributed Version Control at LiDG 
/LiDG, London, October 2010/

A short presentation about Distributed Version Control (mainly Git) to the London iPhone Developer Group in the Regent Street Apple store.
