* abizern.dev site generated by Hugo and served on Github Pages
Developer blog built with Hugo and hugo-tufte. Not so many bells and whistles, I want to try and stick to a content-centric approach.

As this is hosted on Github, the site is generated by a workflow, so changes only need to be made to the =Content.org= file which is then used to generate the actual content, and pushing the repo to Github runs the Hugo tasks to generate the site and deploy it on Github pages.

** Installation
Since the theme is brought in as a submodule be sure to run =git submodule update --init= as required
** Content
All content is generated by the =Content.org= file. [[https://hugo-tufte.netlify.app/posts/tufte-css/][ox-hugo]] is used to turn the =Content.org= file into the individual markdown files used by Hugo to generate the content.

The theme is based around [[https://hugo-tufte.netlify.app/posts/tufte-css/][tufte-css]].

The structure is based on the major categories:

- Posts
- Talks
- Tags (this is generated)
- About

There are no top level categories, just use tags.
** Creating Content
Create a subtree in the appropriate location within =Content.org=.

Posts have a Title and an optional subtitle that can be set in the front matter.

Tufte recommends two levels for content: Section (h2) and Subsection (h3), other heading styles are not supported. So don't go below two levels of nested content in a post.
*** Parenthetical Content
The most striking part of the Tufte style is the used of _sidenotes_ and _marginnotes_ which can be put into markdown with escaped HTML. The =Content.org= file has top level macros to make this easier.
*** TODO Math
Fill this out
*** Local Server
The site can be viewed locally, including drafts, with =hugo server -D=.

Math does not work locally on Safari, so check with Chrome.
** See what the site looks like
- Since everything is generated from the =Content.org= file, open this in Emacs
- To generate a new post from the current subtree: =C-c C-e H H= which is the shortcut for =(org-hugo-export-wim-to-md)= or 
- To regenerate the whole site: =C-c C-e H A= which is the shortcut for =(org-hugo-export-wim-to-md :all-subtrees)=
- run =hugo server -D= which will build the site locally and provide a localhost link to view the site and hot reload if any changes are made.
** Theme
Uses the hugo-tufte theme that, added as a submodule so that I'm not a hostage to the original repository. The Github repo has a link to what it is forked from, so I can keep my submodule up to date.
** Deployment
- Clear the =content= folder. The files will be regenerated as individual posts which are then used to create the actual site using a github workflow.
- Generate the content from =Content.org= in Emacs using =C-c C-e H A=
- Commit the changes.
- Push to GitHub. There is a workflow to regenerate the site when the =main= branch is updated.
  - This consumes a little processing time but it should easily come within my free allowance on Github, but it's something to keep an eye on.
  