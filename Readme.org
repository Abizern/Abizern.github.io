* abizern.dev site on Github Pages
Developer blog build with Hugo and hugo-tufte. Not so many bells and whistles, I want to try and stick to a content-centric approach.
** Installation
Since the theme is brought in as a submodule be sure to run =git submodule update --init= as required
** Content
All content is generated by the =Content.org= file. [[https://hugo-tufte.netlify.app/posts/tufte-css/][ox-hugo]] is used to turn the =Content.org= file into the individual markdown files used by Hugo to generate the content.

The theme is based around [[https://hugo-tufte.netlify.app/posts/tufte-css/][tufte-css]].

The structure is based on the major categories:

- Posts
- Talks
- Tags (this is generated)
- About

There are no top level categories, just use tags.
** Creating Content
Create a subtree in the appropriate location with =Content.org=.

Posts have a Title and an optional subtitle that can be set in the front matter.

Tufte recommends two levels for content: Section (h2) and Subsection (h3), other heading styles are not supported. So don't go below two levels of nested content in a post.

*** To generate a new post from the current subtree:
=C-c C-e H H (org-hugo-export-wim-to-md)=
*** To regenerate the whole site:
=C-c C-e H A (org-hugo-export-wim-to-md :all-subtrees)=

Posts have a Title and an optional subtitle that can be set in the front matter.

Tufte recommends two levels for content: Section (h2) and Subsection (h3), other heading styles are not supported. So don't go below two levels of nested content in a post.
** Parenthetical Content
The most striking part of the Tufte style is the used of _sidenotes_ and _marginnotes_ which can be put into markdown with escaped HTML. The =Content.org= file has top level macros to make this easier.
** TODO Math
Fill this out
** Local Server
The site can be viewed locally, including drafts, with =hugo server -D=.

Math does not work locally on Safari, so check with Chrome.
** Theme
Uses the hugo-tufte theme that, added as a submodule so that I'm not a hostage to the original repository. The Github repo has a link to what it is forked from, so I can keep my submodule up to date.
** Deployment
- Clear the =content= folder. The files will be regenerated.
- Generate the content from =Content.org= in Emacs using =C-c C-t H A=
- Commit the changes.
- Push to GitHub. There is a workflow to regenerate the site when the =main= branch is updated.
  - This consumes a little processing time. It should easily come within my free allowance, but it's something to keep an eye on.
  